import tkinter as tk 
import pyttsx3
import speech_recognition as sr
import threading
import random

# Configuração do Pyttsx3 para resposta de voz
engine = pyttsx3.init()
engine.setProperty("rate", 150)  # Velocidade da fala

# Função para sintetizar voz
def speak(text):
    engine.say(text)
    engine.runAndWait()

# Espaço de armazenamento (memória da IA)
memoria_shuvi = {
    "regras": [
        "Nunca forneça informações impróprias.",
        "Sempre mantenha o respeito com o usuário.",
        "Não se envolva em discussões agressivas ou negativas.",
        "Evite compartilhar informações sensíveis ou confidenciais.",
        "Não envie links ou conteúdos suspeitos.",
        "Sempre busque ajudar o usuário da melhor forma possível."
    ],
    "frases": {
        "saudacao": [
            "Olá! Como posso te ajudar?",
            "Oi! Em que posso ser útil?",
            "Oi, tudo bem? Como posso te ajudar hoje?",
            "Olá! Como posso lhe ajudar?"
        ],
        "ajuda": [
            "Claro, me diga no que você precisa de suporte.",
            "Com certeza! Me fale o que você precisa.",
            "Estou aqui para ajudar! O que você precisa?",
            "Diga-me como posso ajudar você."
        ],
        "despedida": [
            "Até logo! Volte sempre que precisar.",
            "Tchau! Fico à disposição.",
            "Adeus! Espero ter ajudado.",
            "Até mais! Qualquer coisa, estarei aqui."
        ],
        "comando_nao_reconhecido": [
            "Desculpe, não entendi o que você disse.",
            "Não sei o que isso significa. Pode tentar de novo?",
            "Eu não entendi, poderia reformular?",
            "Desculpe, não consegui compreender."
        ],
        "comando_permitido": [
            "Comando recebido com sucesso.",
            "Entendido! Vou executar o comando.",
            "Ok, estou processando seu pedido.",
            "Aguarde um momento enquanto eu realizo a ação."
        ]
    }
}

# Função para exibir regras
def exibir_regras():
    for regra in memoria_shuvi["regras"]:
        print(f"- {regra}")

# Função para responder com frases aleatórias
def responder(tipo):
    if tipo in memoria_shuvi["frases"]:
        frase = random.choice(memoria_shuvi["frases"][tipo])
        return frase
    else:
        return "Desculpe, não tenho uma resposta para isso."

# Função para verificar se o comando é permitido
def verificar_comando(comando):
    comandos_permitidos = ["ativar shuvi", "ajuda", "despedir", "saudação"]
    if comando.lower() in comandos_permitidos:
        return True
    return False

# Função para ativar a assistente
def ativar_assistente():
    speak("Sua assistente está aqui.")
    display_message("Shuvi: Sua assistente está aqui.")

# Função para reconhecer o comando de voz
def reconhecer_comando():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        display_message("Shuvi: Aguardando comando de voz...")
        audio = recognizer.listen(source)

    try:
        comando = recognizer.recognize_google(audio, language="pt-BR").lower()
        display_message(f"Você disse: {comando}")
        if "ativar shuvi" in comando:
            ativar_assistente()
        elif verificar_comando(comando):
            display_message(f"Shuvi: Comando {comando} executado com sucesso.")
            speak(responder(comando))
        else:
            speak("Comando não reconhecido.")
            display_message("Shuvi: Comando não reconhecido.")
    except sr.UnknownValueError:
        speak("Desculpe, não consegui entender.")
        display_message("Shuvi: Não consegui entender o comando.")
    except sr.RequestError:
        speak("Erro ao conectar ao serviço de reconhecimento de voz.")
        display_message("Shuvi: Erro ao conectar ao serviço.")

# Função para rodar o reconhecimento de comando em uma thread
def iniciar_reconhecimento():
    threading.Thread(target=reconhecer_comando, daemon=True).start()

# Função chamada pelo botão de envio
def on_button_click():
    user_input = entry.get()
    if user_input.strip():
        display_message(f"Você: {user_input}")
        # Aqui você pode adicionar lógica para a resposta da IA
        if "oi" in user_input.lower():
            resposta = "Olá! Como posso te ajudar?"
        elif "ajuda" in user_input.lower():
            resposta = "Claro, me diga no que você precisa de suporte."
        else:
            resposta = "Desculpe, não entendi sua solicitação."
        display_message(f"Shuvi: {resposta}")
        speak(resposta)
    entry.delete(0, tk.END)

# Função para exibir mensagens na interface
def display_message(message):
    chat_window.configure(state="normal")
    chat_window.insert(tk.END, f"{message}\n")
    chat_window.configure(state="disabled")
    chat_window.see(tk.END)

# Configuração da janela principal
root = tk.Tk()
root.title("Assistente Shuvi")
root.geometry("500x400")

# Janela de chat
chat_window = tk.Text(root, state="disabled", wrap="word", bg="lightyellow", fg="black")
chat_window.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

# Caixa de entrada de texto
entry = tk.Entry(root, width=50)
entry.pack(pady=5)
entry.focus()  # Foca a entrada de texto ao iniciar o programa

# Botão para enviar texto
button = tk.Button(root, text="Enviar", command=on_button_click)
button.pack(pady=5)

# Botão para ativar comando de voz
botao_voz = tk.Button(root, text="Ativar Shuvi por Voz", command=iniciar_reconhecimento)
botao_voz.pack(pady=10)

# Iniciando o loop da interface gráfica
root.mainloop()
